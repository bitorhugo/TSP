.TH "AG/ag.c" 3 "Mon Jan 10 2022" "TSP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AG/ag.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'ag\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBintialize_genetic_algorithm\fP (\fBCOUNTRY\fP *\fBcountry\fP, int num_iterations, int size_population, int num_elitism, float mutation_probability)"
.br
.ti -1c
.RI "\fBGENERATION\fP * \fBinsert_generation\fP (\fBGENERATION\fP **head, bool at_head)"
.br
.ti -1c
.RI "\fBGENERATION\fP * \fBsearch_generation\fP (\fBGENERATION\fP **head, uint32_t generation_id)"
.br
.ti -1c
.RI "\fBGENERATION\fP * \fBsearch_generation_via_fitness\fP (\fBGENERATION\fP **head, int fitness_value)"
.br
.ti -1c
.RI "\fBGENERATION\fP * \fBallocate_memory_generation\fP ()"
.br
.ti -1c
.RI "int \fBis_generation_list_empty\fP (\fBGENERATION\fP **head)"
.br
.ti -1c
.RI "void \fBfree_generation_list\fP (\fBGENERATION\fP **head)"
.br
.ti -1c
.RI "\fBPOPULATION\fP * \fBcreate_initial_population\fP (\fBCOUNTRY\fP *country_to_visit, int size_of_population)"
.br
.ti -1c
.RI "\fBPOPULATION\fP * \fBcreate_next_population\fP (\fBPOPULATION\fP \fBpopulation\fP, int elitism_amount, float mutation_prob)"
.br
.ti -1c
.RI "void \fBinsert_cromossomas\fP (\fBPOPULATION\fP *\fBpopulation\fP, \fBCOUNTRY\fP *\fBcountry\fP)"
.br
.ti -1c
.RI "void \fBinsert_fittest_chromosomes\fP (\fBGENERATION\fP *\fBgeneration\fP)"
.br
.ti -1c
.RI "void \fBinsert_gene\fP (\fBCHROMOSOME\fP *cromo, \fBCOUNTRY\fP *arr_of_countries)"
.br
.ti -1c
.RI "void \fBsort_cromo_by_fitness\fP (\fBPOPULATION\fP *\fBpopulation\fP)"
.br
.ti -1c
.RI "float \fBfitness\fP (\fBCHROMOSOME\fP *cromo)"
.br
.ti -1c
.RI "float \fBsum_population_fitness\fP (\fBPOPULATION\fP *\fBpopulation\fP)"
.br
.ti -1c
.RI "void \fBbreed_population\fP (\fBPOPULATION\fP *\fBpopulation\fP, int elitism_amount)"
.br
.ti -1c
.RI "\fBCHROMOSOME\fP * \fBcross_over\fP (\fBCHROMOSOME\fP *parent_one, \fBCHROMOSOME\fP *parent_two)"
.br
.ti -1c
.RI "void \fBparent_selection\fP (\fBPOPULATION\fP *\fBpopulation\fP, int elitism_amount)"
.br
.ti -1c
.RI "\fBCHROMOSOME\fP * \fBfitness_proportional_selection\fP (\fBPOPULATION\fP *\fBpopulation\fP, const float *cumulative_prob)"
.br
.ti -1c
.RI "void \fBmutation\fP (\fBPOPULATION\fP *\fBpopulation\fP, float mutation_prob)"
.br
.ti -1c
.RI "\fBPOPULATION\fP * \fBallocate_memory_population\fP ()"
.br
.ti -1c
.RI "\fBCHROMOSOME\fP * \fBallocate_memory_cromossomas\fP (int size)"
.br
.ti -1c
.RI "\fBGENE\fP * \fBallocate_memory_genes\fP (int size)"
.br
.ti -1c
.RI "void \fBshuffle_genes\fP (\fBCHROMOSOME\fP *chromo, int size)"
.br
.ti -1c
.RI "float \fBeuclidean_dist\fP (\fBGENE\fP *first, \fBGENE\fP *second)"
.br
.ti -1c
.RI "void \fBswap_cromo\fP (\fBCHROMOSOME\fP *a, \fBCHROMOSOME\fP *b)"
.br
.ti -1c
.RI "void \fBswap_gene\fP (\fBGENE\fP *a, \fBGENE\fP *b)"
.br
.ti -1c
.RI "void \fBcalculate_cumulative_prob\fP (\fBPOPULATION\fP *\fBpopulation\fP, float *cumulative_prob)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBCHROMOSOME\fP* allocate_memory_cromossomas (int size)"

.PP
Definition at line 358 of file ag\&.c\&.
.SS "\fBGENERATION\fP* allocate_memory_generation ()"

.PP
Definition at line 112 of file ag\&.c\&.
.SS "\fBGENE\fP* allocate_memory_genes (int size)"

.PP
Definition at line 364 of file ag\&.c\&.
.SS "\fBPOPULATION\fP* allocate_memory_population ()"
allocates memory for population 
.PP
\fBReturns:\fP
.RS 4
address of population 
.RE
.PP

.PP
Definition at line 352 of file ag\&.c\&.
.SS "void breed_population (\fBPOPULATION\fP * population, int elitism_amount)"

.PP
Definition at line 245 of file ag\&.c\&.
.SS "void calculate_cumulative_prob (\fBPOPULATION\fP * population, float * cumulative_prob)"

.PP
Definition at line 400 of file ag\&.c\&.
.SS "\fBPOPULATION\fP* create_initial_population (\fBCOUNTRY\fP * country_to_visit, int size_of_population)"

.PP
Definition at line 133 of file ag\&.c\&.
.SS "\fBPOPULATION\fP* create_next_population (\fBPOPULATION\fP population, int elitism_amount, float mutation_prob)"

.PP
Definition at line 142 of file ag\&.c\&.
.SS "\fBCHROMOSOME\fP cross_over (\fBCHROMOSOME\fP * parent_one, \fBCHROMOSOME\fP * parent_two)"

.PP
Definition at line 266 of file ag\&.c\&.
.SS "float euclidean_dist (\fBGENE\fP * first, \fBGENE\fP * second)"

.PP
Definition at line 384 of file ag\&.c\&.
.SS "float fitness (\fBCHROMOSOME\fP * cromo)"

.PP
Definition at line 219 of file ag\&.c\&.
.SS "\fBCHROMOSOME\fP* fitness_proportional_selection (\fBPOPULATION\fP * population, const float * cumulative_prob)"

.PP
Definition at line 311 of file ag\&.c\&.
.SS "void free_generation_list (\fBGENERATION\fP ** head)"

.PP
Definition at line 121 of file ag\&.c\&.
.SS "void insert_cromossomas (\fBPOPULATION\fP * population, \fBCOUNTRY\fP * country)"

.PP
Definition at line 161 of file ag\&.c\&.
.SS "void insert_fittest_chromosomes (\fBGENERATION\fP * generation)"

.PP
Definition at line 175 of file ag\&.c\&.
.SS "void insert_gene (\fBCHROMOSOME\fP * cromo, \fBCOUNTRY\fP * arr_of_countries)"

.PP
Definition at line 187 of file ag\&.c\&.
.SS "\fBGENERATION\fP* insert_generation (\fBGENERATION\fP ** head, bool at_head)"

.PP
Definition at line 52 of file ag\&.c\&.
.SS "void intialize_genetic_algorithm (\fBCOUNTRY\fP * country, int num_iterations, int size_population, int num_elitism, float mutation_probability)"

.PP
Definition at line 9 of file ag\&.c\&.
.SS "int is_generation_list_empty (\fBGENERATION\fP ** head)"

.PP
Definition at line 117 of file ag\&.c\&.
.SS "void mutation (\fBPOPULATION\fP * population, float mutation_prob)"

.PP
Definition at line 326 of file ag\&.c\&.
.SS "void parent_selection (\fBPOPULATION\fP * population, int elitism_amount)"

.PP
Definition at line 297 of file ag\&.c\&.
.SS "\fBGENERATION\fP* search_generation (\fBGENERATION\fP ** head, uint32_t generation_id)"

.PP
Definition at line 76 of file ag\&.c\&.
.SS "\fBGENERATION\fP* search_generation_via_fitness (\fBGENERATION\fP ** head, int fitness_value)"

.PP
Definition at line 96 of file ag\&.c\&.
.SS "void shuffle_genes (\fBCHROMOSOME\fP * chromo, int size)"

.PP
Definition at line 372 of file ag\&.c\&.
.SS "void sort_cromo_by_fitness (\fBPOPULATION\fP * population)"

.PP
Definition at line 202 of file ag\&.c\&.
.SS "float sum_population_fitness (\fBPOPULATION\fP * population)"

.PP
Definition at line 233 of file ag\&.c\&.
.SS "void swap_cromo (\fBCHROMOSOME\fP * a, \fBCHROMOSOME\fP * b)"

.PP
Definition at line 388 of file ag\&.c\&.
.SS "void swap_gene (\fBGENE\fP * a, \fBGENE\fP * b)"

.PP
Definition at line 394 of file ag\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for TSP from the source code\&.
